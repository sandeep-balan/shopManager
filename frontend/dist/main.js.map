{"version":3,"sources":["./src/app/shared/global-constants.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/shared/accordion/accordion.directive.ts","./src/app/shared/accordion/accordionlink.directive.ts","./src/app/shared/menu-items.ts","./src/app/material-component/dialog/change-password/change-password.component.ts","./src/app/material-component/dialog/change-password/change-password.component.html","./src/app/shared/accordion/index.ts","./src/app/layouts/full/sidebar/sidebar.component.ts","./src/app/layouts/full/sidebar/sidebar.component.html","./src/app/shared/shared.module.ts","./src/app/layouts/full/full.component.ts","./src/app/layouts/full/full.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/material-component/dialog/confirmation/confirmation.component.ts","./src/app/material-component/dialog/confirmation/confirmation.component.html","./src/app/forgot-password/forgot-password.component.ts","./src/app/forgot-password/forgot-password.component.html","./src/app/app.module.ts","./src/app/services/auth.service.ts","./src/app/services/route-guard.service.ts","./src/app/services/snackbar.service.ts","./src/app/shared/material-module.ts","./src/app/services/user.service.ts","./src/app/signup/signup.component.ts","./src/app/signup/signup.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/layouts/full/header/header.component.ts","./src/app/layouts/full/header/header.component.html","./src/app/shared/accordion/accordionanchor.directive.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object","./src/app/services/token-interceptor.interceptor.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class GlobalConstants {\n  public static genericError: string =\n    'Something went wrong!! PLease try again!!';\n\n  public static unauthorized: string =\n    'You are not authorized to view this page!';\n\n  public static productExistError: string = 'Product already exists';\n\n  public static productAdded: string = 'Product added successfully';\n  \n\n  public static nameRegex: string = '[a-zA-Z0-9 ]*';\n\n  public static emailRegex: string =\n    '[A-Za-z0-9._%-]+@[A-Za-z0-9._%-]+\\\\.[a-z]{2,3}';\n\n  public static contactNumberRegex: string = '^[e0-9]{10,10}$';\n\n  public static error: string = 'error';\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ForgotPasswordComponent } from '../forgot-password/forgot-password.component';\nimport { LoginComponent } from '../login/login.component';\nimport { UserService } from '../services/user.service';\nimport { SignupComponent } from '../signup/signup.component';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  constructor(\n    private dialog: MatDialog,\n    private router: Router,\n    private userService: UserService\n  ) {}\n\n  ngOnInit(): void {\n    if (localStorage.getItem('token') !== null) {\n      this.userService.checkToken().subscribe(\n        (resp: any) => {\n          this.router.navigate(['/cafe/dashboard']);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }\n\n  signupAction() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '550px';\n    this.dialog.open(SignupComponent, dialogConfig);\n  }\n\n  forgotPasswordAction() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '550px';\n    this.dialog.open(ForgotPasswordComponent, dialogConfig);\n  }\n\n  loginAction() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '550px';\n    this.dialog.open(LoginComponent, dialogConfig);\n  }\n}\n","\n\n    <!-- <section class=\"hero\">\n      <header>\n        <nav>\n          <div class=\"logo\">\n            \n            <span class=\"dot\"></span>\n            Shop <br />\n            Manager\n            <span class=\"dot\"></span>\n            \n          </div>\n          \n          <div class=\"nav-links\">\n            <a (click)=\"loginAction()\">Login</a>\n            <a (click)=\"signupAction()\">Sign-up</a>\n            <a (click)=\"forgotPasswordAction()\">Forgot Password</a>\n            \n          </div>\n        </nav>\n      </header>\n      <div class=\"intro\">\n        <div class=\"intro1\">\n          <span class=\"sub\">Shop Manager</span>\n          <p class=\"description\">Manage Your Products and Users at One Place</p>\n        </div>\n        \n      </div>\n      <div class=\"hero-bg\">\n        <img src=\"..\\assets\\img\\cup_of_coffee.png\" alt=\"cup of coffee\" />\n      </div>\n   \n    </section> -->\n\n\n\n\n\n    <!-- ///// -->\n\n    <div class=\"header\">\n      <div class=\"logo\">\n            \n        <span class=\"dot\"></span>\n        Shop <br />\n        Manager\n        <span class=\"dot\"></span>\n        \n      </div>\n      \n      <div class=\"header-right\">\n        <a class=\"active btn\" (click)=\"loginAction()\">Login</a>\n            <a class=\"btn\"(click)=\"signupAction()\">Sign-up</a>\n            <a class=\"btn\"(click)=\"forgotPasswordAction()\">Forgot Password</a>\n      </div>\n    </div>\n        <div class=\"body-element\">\n          <img  class=\"image\" src=\"../../assets/img/shop.png\" alt=\"\">\n          <div>\n            <h1 class=\"text t1\">Shop Manager</h1>\n            <h3 class=\"text t2\">Manage Customers and Users<br/> at Single Place</h3>\n          </div>\n      </div>\n    ","export const environment = {\n  production: false,\n  apiURL: 'https://shopmanager.onrender.com/'\n};","import {\n  Directive,\n  OnInit,\n  AfterViewInit,\n  AfterContentChecked\n} from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { AccordionLinkDirective } from './accordionlink.directive';\nimport { filter } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appAccordion]'\n})\nexport class AccordionDirective implements AfterContentChecked {\n  protected navlinks: Array<AccordionLinkDirective> = [];\n\n  closeOtherLinks(selectedLink: AccordionLinkDirective): void {\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\n      if (link !== selectedLink) {\n        link.selected = false;\n      }\n    });\n  }\n\n  addLink(link: AccordionLinkDirective): void {\n    this.navlinks.push(link);\n  }\n\n  removeGroup(link: AccordionLinkDirective): void {\n    const index = this.navlinks.indexOf(link);\n    if (index !== -1) {\n      this.navlinks.splice(index, 1);\n    }\n  }\n\n  checkOpenLinks() {\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\n      if (link.group) {\n        const routeUrl = this.router.url;\n        const currentUrl = routeUrl.split('/');\n        if (currentUrl.indexOf(link.group) > 0) {\n          link.selected = true;\n          this.closeOtherLinks(link);\n        }\n      }\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(e => this.checkOpenLinks());\n  }\n\n  constructor(private router: Router) {\n    setTimeout(() => this.checkOpenLinks());\n  }\n}\n","import {\n  Directive,\n  HostBinding,\n  Inject,\n  Input,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { AccordionDirective } from './accordion.directive';\n\n@Directive({\n  selector: '[appAccordionLink]'\n})\nexport class AccordionLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  public group: any;\n\n  @HostBinding('class.selected')\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  set selected(value: boolean) {\n    this._selected = value;\n    if (value) {\n      this.nav.closeOtherLinks(this);\n    }\n  }\n\n  protected _selected: boolean=false;\n  protected nav: AccordionDirective;\n\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\n    this.nav = nav;\n  }\n\n  ngOnInit(): any {\n    this.nav.addLink(this);\n  }\n\n  ngOnDestroy(): any {\n    this.nav.removeGroup(this);\n  }\n\n  toggle(): any {\n    this.selected = !this.selected;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nexport interface Menu {\n  state: string;\n  name: string;\n  icon: string;\n  role: string;\n}\n\nconst MENUITEMS = [\n  { state: 'dashboard', name: 'Dashboard', icon: 'dashboard', role: '' },\n  { state: 'category', name: 'Manage Categories', icon: 'category', role: 'admin', },\n  { state: 'product', name: 'Manage Products', icon: 'grass', role: 'admin' },\n  { state: 'order', name: 'Manage Orders', icon: 'list_alt', role: '' },\n  { state: 'bill', name: 'View Bills', icon: 'money', role: '' },\n  { state: 'user', name: 'Manage Users', icon: 'people', role: 'admin' },\n];\n\n@Injectable()\nexport class MenuItems {\n  getMenuItems(): Menu[] {\n    return MENUITEMS;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from 'src/app/services/snackbar.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss'],\n})\nexport class ChangePasswordComponent implements OnInit {\n  changePasswordForm: any = FormGroup;\n  responseMessage: any;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    public dialogRef: MatDialogRef<ChangePasswordComponent>,\n    private ngxService: NgxUiLoaderService,\n    private snackBar: SnackbarService\n  ) {}\n\n  ngOnInit(): void {\n    this.changePasswordForm = this.fb.group({\n      oldPassword: [null, [Validators.required]],\n      newPassword: [null, [Validators.required]],\n      confirmPassword: [null, [Validators.required]],\n    });\n  }\n\n  validateSubmit() {\n    if (\n      this.changePasswordForm.controls['newPassword'].value !==\n      this.changePasswordForm.controls['confirmPassword'].value\n    ) {\n      console.log( this.changePasswordForm.controls.newPassword.value,\n        this.changePasswordForm.controls.confirmPassword.value);\n      return true;\n    } else {\n      console.log( this.changePasswordForm.controls.newPassword.value,\n        this.changePasswordForm.controls.confirmPassword.value);\n      return false;\n    }\n  }\n\n  handleSubmit() {\n    this.ngxService.start();\n    let formData = this.changePasswordForm.value;\n    let data = {\n      oldPassword: formData.oldPassword,\n      newPassword: formData.newPassword,\n      confirmPassword: formData.confirmPassword,\n    };\n\n    this.userService.changePassword(data).subscribe(\n      (resp: any) => {\n        this.ngxService.stop();\n        this.responseMessage = resp?.message;\n        this.dialogRef.close();\n        this.snackBar.openSnackBar(this.responseMessage, 'success');\n      },\n      (error) => {\n        this.ngxService.stop();\n        console.log(error);\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      }\n    );\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxLayout=\"row\">\n    <span class=\"title-center\">Change Password</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content>\n  <form [formGroup]=\"changePasswordForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Old Password</mat-label>\n        <input\n          type=\"password\"\n          matInput\n          formControlName=\"oldPassword\"\n          required\n        />\n        <mat-error\n          *ngIf=\"\n            changePasswordForm.controls.oldPassword.touched &&\n            changePasswordForm.controls.oldPassword.invalid\n          \"\n        >\n          <span *ngIf=\"changePasswordForm.controls.oldPassword.errors.required\"\n            >This field is mandatory</span\n          ></mat-error\n        >\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>New Password</mat-label>\n        <input\n          type=\"password\"\n          matInput\n          formControlName=\"newPassword\"\n          required\n        />\n        <mat-error\n          *ngIf=\"\n            changePasswordForm.controls.newPassword.touched &&\n            changePasswordForm.controls.newPassword.invalid\n          \"\n        >\n          <span *ngIf=\"changePasswordForm.controls.newPassword.errors.required\"\n            >This field is mandatory</span\n          ></mat-error\n        >\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Confirm Password</mat-label>\n        <input\n          type=\"password\"\n          matInput\n          formControlName=\"confirmPassword\"\n          required\n        />\n        <mat-error\n          *ngIf=\"\n            changePasswordForm.controls.confirmPassword.touched &&\n            changePasswordForm.controls.confirmPassword.invalid\n          \"\n        >\n          <span\n            *ngIf=\"changePasswordForm.controls.confirmPassword.errors.required\"\n            >This field is mandatory</span\n          ></mat-error\n        >\n        <mat-hint *ngIf=\"validateSubmit() && !(changePasswordForm.controls.confirmPassword.invalid)\">\n          <span>New Password and Confirm Password does not match.</span>\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"handleSubmit()\"\n    [disabled]=\"\n      validateSubmit() ||\n      !(changePasswordForm.valid && changePasswordForm.dirty)\n    \"\n  >\n    Update\n  </button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","export * from './accordionanchor.directive';\nexport * from './accordionlink.directive';\nexport * from './accordion.directive';\n","import { ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport jwtDecode from 'jwt-decode';\nimport { MenuItems } from 'src/app/shared/menu-items';\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: [],\n})\nexport class AppSidebarComponent implements OnDestroy {\n  mobileQuery: MediaQueryList;\n  token: string = localStorage.getItem('token')!;\n  tokenPayload: any;\n\n  private _mobileQueryListener: () => void;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    media: MediaMatcher,\n    public menuItems: MenuItems\n  ) {\n    this.tokenPayload = jwtDecode(this.token);\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this._mobileQueryListener);\n  }\n\n  ngOnDestroy(): void {\n    this.mobileQuery.removeListener(this._mobileQueryListener);\n  }\n}\n","<mat-nav-list appAccordion>\n  <mat-list-item\n \n    appAccordionLink\n    *ngFor=\"let menuItem of menuItems.getMenuItems()\"\n    routerLinkActive=\"selected\"\n    group=\"{{menuItem.state}}\"\n  >\n    <a\n      appAccordionToggle\n      [routerLink]=\"['/cafe/', menuItem.state]\"\n      *ngIf=\"menuItem.role === '' || menuItem.role === tokenPayload.role\"\n    >\n      <mat-icon>{{ menuItem.icon }}</mat-icon>\n      <span>{{ menuItem.name }}</span>\n      <span fxFlex></span>\n    </a>\n  </mat-list-item>\n</mat-nav-list>\n","import { NgModule } from '@angular/core';\n\nimport { AccordionAnchorDirective, AccordionLinkDirective, AccordionDirective } from './accordion';\nimport { MenuItems } from './menu-items';\n\n\n@NgModule({\n  declarations: [\n    AccordionAnchorDirective,\n    AccordionLinkDirective,\n    AccordionDirective\n  ],\n  exports: [\n    AccordionAnchorDirective,\n    AccordionLinkDirective,\n    AccordionDirective\n   ],\n  providers: [MenuItems]\n})\nexport class SharedModule { }\n","import { MediaMatcher } from '@angular/cdk/layout';\nimport { ChangeDetectorRef, Component, OnDestroy, AfterViewInit } from '@angular/core';\n\n\n/** @title Responsive sidenav */\n@Component({\n  selector: 'app-full-layout',\n  templateUrl: 'full.component.html',\n  styleUrls: ['full.component.scss']\n})\nexport class FullComponent implements OnDestroy, AfterViewInit {\n  mobileQuery: MediaQueryList;\n\n  private _mobileQueryListener: () => void;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    media: MediaMatcher\n  ) {\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this._mobileQueryListener);\n  }\n\n  ngOnDestroy(): void {\n    this.mobileQuery.removeListener(this._mobileQueryListener);\n  }\n  ngAfterViewInit() { }\n}\n","<div class=\"main-container\">\n    <mat-toolbar  color=\"primary\" class=\"topbar telative\">\n        <div class=\"navbar-header\">\n            <button mat-icon-button (click)=\"snav.toggle()\" value=\"sidebarclosed\" style=\"vertical-align: bottom;\">\n                <mat-icon>menu</mat-icon>\n            </button><b>\n                <span style=\"vertical-align: middle;\">\n                    <mat-icon>storefront</mat-icon>\n                </span>\n            </b>\n            <span fxShow=\"false\" class=\"heading\"fxShow.gt-xs>\n                Shop Manager\n            </span>\n        </div>\n        <span fxFlex></span>\n        <app-header></app-header>\n    </mat-toolbar>\n    <mat-sidenav-container class=\"example-sidenav-container\" [style.marginTop.px]=\"mobileQuery.matches ? 0 : 0\">\n        <mat-sidenav #snav id=\"snav\" class=\"dark-sidebar pl-xs\" [mode]=\"mobileQuery.matches ? 'side' : 'over'\"\n            fixedTopGap=\"0\" [opened]=\"mobileQuery.matches\" [disableClose]=\"mobileQuery.matches\">\n            <app-sidebar></app-sidebar>\n        </mat-sidenav>\n        <mat-sidenav-content class=\"page-wrapper\">\n            <div class=\"page-content\">\n                <router-outlet></router-outlet>\n            </div>\n        </mat-sidenav-content>\n    </mat-sidenav-container>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Frontend';\n}\n","<router-outlet></router-outlet> \n<ngx-ui-loader></ngx-ui-loader>\n","import { Component, EventEmitter, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirmation',\n  templateUrl: './confirmation.component.html',\n  styleUrls: ['./confirmation.component.scss'],\n})\nexport class ConfirmationComponent implements OnInit {\n  onEmitStatusChange = new EventEmitter();\n  details: any = {};\n\n  constructor(@Inject(MAT_DIALOG_DATA) public dialogData: any) {}\n\n  ngOnInit(): void {\n    if (this.dialogData) {\n      this.details = this.dialogData;\n    }\n  }\n\n  handleChangeAction() {\n    this.onEmitStatusChange.emit();\n  }\n}\n","<mat-dialog-content class=\"mat-typography\">\n  <h5>Are you sure you want to {{ details.message }} ?</h5>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button (click)=\"handleChangeAction()\" color=\"primary\">\n    Yes\n  </button>\n\n  <button mat-raised-button mat-dialog-close>\n    No\n  </button>\n</mat-dialog-actions>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { UserService } from '../services/user.service';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: any = FormGroup;\n  responseMessage: any;\n\n  constructor(\n    private fb: FormBuilder,\n    // private router: Router,\n    private userService: UserService,\n    private snackBar: SnackbarService,\n    private dialogRef: MatDialogRef<ForgotPasswordComponent>,\n    private ngxService: NgxUiLoaderService\n  ) {}\n\n  ngOnInit(): void {\n    this.forgotPasswordForm = this.fb.group({\n      email: [\n        null,\n        [Validators.required, Validators.pattern(GlobalConstants.emailRegex)],\n      ],\n    });\n  }\n\n  handleSubmit() {\n    this.ngxService.start();\n    let formData = this.forgotPasswordForm.value;\n    let data = {\n      email: formData.email,\n    };\n\n    this.userService.forgotPassword(data).subscribe(\n      (resp: any) => {\n        this.ngxService.stop();\n        this.responseMessage = resp?.message;\n        this.dialogRef.close();\n        this.snackBar.openSnackBar(this.responseMessage, '');\n      },\n      (error) => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      }\n    );\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxLayout=\"row\">\n    <span class=\"title-center\">Forgot Password?</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"forgotPasswordForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Email</mat-label>\n        <input type=\"email\" matInput formControlName=\"email\" required />\n        <mat-error\n          *ngIf=\"\n            forgotPasswordForm.controls.email.touched &&\n            forgotPasswordForm.controls.email.invalid\n          \"\n        >\n          <span *ngIf=\"forgotPasswordForm.controls.email.errors.required\"\n            >This field is mandatory</span\n          >\n          <span *ngIf=\"forgotPasswordForm.controls.email.errors.pattern\"\n            >This field is invalid</span\n          >\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    type=\"submit\"\n    (click)=\"handleSubmit()\"\n    [disabled]=\"!(forgotPasswordForm.valid && forgotPasswordForm.dirty)\"\n  >\n    Send Password\n  </button>\n\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './shared/material-module';\nimport { HomeComponent } from './home/home.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SharedModule } from './shared/shared.module';\nimport { FullComponent } from './layouts/full/full.component';\nimport { AppHeaderComponent } from './layouts/full/header/header.component';\nimport { AppSidebarComponent } from './layouts/full/sidebar/sidebar.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { SignupComponent } from './signup/signup.component';\nimport {\n  NgxUiLoaderConfig,\n  NgxUiLoaderModule,\n  PB_DIRECTION,\n  SPINNER,\n} from 'ngx-ui-loader';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { TokenInterceptorInterceptor } from './services/token-interceptor.interceptor';\nimport { AccordionLinkDirective } from './shared/accordion';\n\nconst ngx_ui_loader_config: NgxUiLoaderConfig = {\n  text: 'Loading...',\n  textColor: '#FFFFFF',\n  textPosition: 'center-center',\n  pbColor: 'red',\n  bgsColor: 'red',\n  fgsColor: 'red',\n  fgsType: SPINNER.chasingDots,\n  fgsSize: 100,\n  pbDirection: PB_DIRECTION.leftToRight,\n  pbThickness: 5,\n};\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    FullComponent,\n    AppHeaderComponent,\n    AppSidebarComponent,\n    SignupComponent,\n    ForgotPasswordComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    SharedModule,\n    HttpClientModule,\n    NgxUiLoaderModule.forRoot(ngx_ui_loader_config),\n  ],\n  providers: [\n    HttpClientModule,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptorInterceptor,\n      multi: true,\n    },\n    AccordionLinkDirective\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private router: Router) {}\n\n  public isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      this.router.navigate(['/']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { SnackbarService } from './snackbar.service';\nimport jwt_decode from 'jwt-decode';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouteGuardService {\n  constructor(\n    public auth: AuthService,\n    private router: Router,\n    private snackBar: SnackbarService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    let expectedRoleArray: any = route.data;\n    expectedRoleArray = expectedRoleArray.expectedRole;\n\n    const token: string = localStorage.getItem('token')!;\n    let tokenPayload: any;\n\n    try {\n      tokenPayload = jwt_decode(token);\n    } catch (error) {\n      localStorage.clear();\n      this.router.navigate(['/']);\n    }\n\n    let checkRole = false;\n\n    for (let role of expectedRoleArray) {\n      if (role === tokenPayload.role) {\n        checkRole = true;\n      }\n    }\n\n    if (tokenPayload.role === 'user' || tokenPayload.role === 'admin') {\n      if (this.auth.isAuthenticated() && checkRole) {\n        return true;\n      }\n      \n      this.snackBar.openSnackBar(\n        GlobalConstants.unauthorized,\n        GlobalConstants.error\n      );\n\n      this.router.navigate(['/']);\n      return false;\n    } else {\n      this.router.navigate(['/']);\n      localStorage.clear();\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  constructor(private snackbar: MatSnackBar) {}\n\n  openSnackBar(message: string, action: string) {\n    if (action === 'error') {\n      this.snackbar.open(message, '', {\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        duration: 1500,\n        panelClass: ['black-snackbar'],\n      });\n    } else {\n      this.snackbar.open(message, '', {\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        duration: 1500,\n        panelClass: ['green-snackbar'],\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n import { NgModule } from '@angular/core';\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\n import { MatButtonModule } from '@angular/material/button';\n import { MatButtonToggleModule } from '@angular/material/button-toggle';\n import { MatCardModule } from '@angular/material/card';\n import { MatCheckboxModule } from '@angular/material/checkbox';\n import { MatChipsModule } from '@angular/material/chips';\n import { MatDatepickerModule } from '@angular/material/datepicker';\n import { MatDialogModule } from '@angular/material/dialog';\n import { MatExpansionModule } from '@angular/material/expansion';\n import { MatFormFieldModule } from '@angular/material/form-field';\n import { MatGridListModule } from '@angular/material/grid-list';\n import { MatIconModule } from '@angular/material/icon';\n import { MatInputModule } from '@angular/material/input';\n import { MatListModule } from '@angular/material/list';\n import { MatMenuModule } from '@angular/material/menu';\n import { MatPaginatorModule } from '@angular/material/paginator';\n import { MatProgressBarModule } from '@angular/material/progress-bar';\n import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n import { MatRadioModule } from '@angular/material/radio';\n import { MatSelectModule } from '@angular/material/select';\n import { MatSidenavModule } from '@angular/material/sidenav';\n import { MatSliderModule } from '@angular/material/slider';\n import { MatSlideToggleModule } from '@angular/material/slide-toggle';\n import { MatSnackBarModule } from '@angular/material/snack-bar';\n import { MatSortModule } from '@angular/material/sort';\n import { MatTableModule } from '@angular/material/table';\n import { MatTabsModule } from '@angular/material/tabs';\n import { MatToolbarModule } from '@angular/material/toolbar';\n import { MatTooltipModule } from '@angular/material/tooltip';\n import { MatStepperModule } from '@angular/material/stepper';\n import { MatBadgeModule } from '@angular/material/badge';\n import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\n import { MatBottomSheetModule } from '@angular/material/bottom-sheet';\n \n import { CdkTableModule } from '@angular/cdk/table';\n import { CdkAccordionModule } from '@angular/cdk/accordion';\n import { A11yModule } from '@angular/cdk/a11y';\n import { BidiModule } from '@angular/cdk/bidi';\n import { OverlayModule } from '@angular/cdk/overlay';\n import { PlatformModule } from '@angular/cdk/platform';\n import { ObserversModule } from '@angular/cdk/observers';\n import { PortalModule } from '@angular/cdk/portal';\n \n /**\n  * NgModule that includes all Material modules that are required to serve the demo-app.\n  */\n @NgModule({\n     exports: [\n         MatAutocompleteModule,\n         MatButtonModule,\n         MatBottomSheetModule,\n         MatButtonToggleModule,\n         MatCardModule,\n         MatCheckboxModule,\n         MatChipsModule,\n         MatTableModule,\n         MatDatepickerModule,\n         MatDialogModule,\n         MatExpansionModule,\n         MatFormFieldModule,\n         MatGridListModule,\n         MatIconModule,\n         MatInputModule,\n         MatListModule,\n         MatMenuModule,\n         MatPaginatorModule,\n         MatProgressBarModule,\n         MatProgressSpinnerModule,\n         MatRadioModule,\n         MatRippleModule,\n         MatSelectModule,\n         MatBadgeModule,\n         MatSidenavModule,\n         MatSlideToggleModule,\n         MatSliderModule,\n         MatSnackBarModule,\n         MatSortModule,\n         MatStepperModule,\n         MatTabsModule,\n         MatToolbarModule,\n         MatTooltipModule,\n         MatNativeDateModule,\n         CdkTableModule,\n         A11yModule,\n         BidiModule,\n         CdkAccordionModule,\n         ObserversModule,\n         OverlayModule,\n         PlatformModule,\n         PortalModule\n     ]\n })\n export class MaterialModule { }\n ","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  url = \"https://shopmanager.onrender.com/\";\n  jsonHeader = {\n    headers: new HttpHeaders().set('Content-Type', 'application/json'),\n  };\n\n  constructor(private http: HttpClient) {}\n\n  signup(data: any) {\n    return this.http.post(`${this.url}/user/signup`, data, this.jsonHeader);\n  }\n\n  forgotPassword(data: any) {\n    return this.http.post(\n      `${this.url}/user/forgotPassword`,\n      data,\n      this.jsonHeader\n    );\n  }\n\n  login(data: any) {\n    return this.http.post(`${this.url}/user/login`, data, this.jsonHeader);\n  }\n\n  checkToken() {\n    return this.http.get(`${this.url}/user/checkToken`);\n  }\n\n  changePassword(data: any) {\n    return this.http.post(\n      `${this.url}/user/changePassword`,\n      data,\n      this.jsonHeader\n    );\n  }\n\n  getUsers() {\n    return this.http.get(`${this.url}/user/get`);\n  }\n\n  update(data: any) {\n    return this.http.patch(`${this.url}/user/update`, data, this.jsonHeader);\n  }\n  delete(id:any){\n    return this.http.delete(`${this.url}/user/delete/${id}`,this.jsonHeader);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { UserService } from '../services/user.service';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss'],\n})\nexport class SignupComponent implements OnInit {\n  signupForm: any = FormGroup;\n  responseMessage!: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private userService: UserService,\n    private snackBar: SnackbarService,\n    private dialogRef: MatDialogRef<SignupComponent>,\n    private ngxService: NgxUiLoaderService\n  ) {}\n\n  ngOnInit(): void {\n    this.signupForm = this.fb.group({\n      name: [\n        null,\n        [Validators.required, Validators.pattern(GlobalConstants.nameRegex)],\n      ],\n      email: [\n        null,\n        [Validators.required, Validators.pattern(GlobalConstants.emailRegex)],\n      ],\n      contactNumber: [\n        null,\n        [\n          Validators.required,\n          Validators.pattern(GlobalConstants.contactNumberRegex),\n        ],\n      ],\n      password: [null, [Validators.required]],\n    });\n  }\n\n  handleSubmit() {\n    this.ngxService.start();\n    let formData = this.signupForm.value;\n    var data = {\n      name: formData.name,\n      email: formData.email,\n      contactNumber: formData.contactNumber,\n      password: formData.password,\n    };\n\n    this.userService.signup(data).subscribe(\n      (resp: any) => {\n        this.ngxService.stop();\n        this.dialogRef.close();\n        this.responseMessage = resp?.message;\n        this.snackBar.openSnackBar(this.responseMessage, '');\n        this.router.navigate(['/']);\n      },\n      (error): void => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      }\n    );\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxLayout=\"row\">\n    <span class=\"title-center\">Sign-up</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"signupForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Name</mat-label>\n        <input type=\"text\" matInput formControlName=\"name\" required />\n        <mat-error\n          *ngIf=\"\n            signupForm.controls.name.touched && signupForm.controls.name.invalid\n          \"\n        >\n          <span *ngIf=\"signupForm.controls.name.errors.required\"\n            >This field is mandatory</span\n          >\n          <span *ngIf=\"signupForm.controls.name.errors.pattern\"\n            >This field is invalid</span\n          >\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Email</mat-label>\n        <input type=\"email\" matInput formControlName=\"email\" required />\n        <mat-error\n          *ngIf=\"\n            signupForm.controls.email.touched &&\n            signupForm.controls.email.invalid\n          \"\n        >\n          <span *ngIf=\"signupForm.controls.email.errors.required\"\n            >This field is mandatory</span\n          >\n          <span *ngIf=\"signupForm.controls.email.errors.pattern\"\n            >This field is invalid</span\n          >\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Phone Number</mat-label>\n        <input type=\"text\" matInput formControlName=\"contactNumber\" required />\n        <mat-error\n          *ngIf=\"\n            signupForm.controls.contactNumber.touched &&\n            signupForm.controls.contactNumbervalid\n          \"\n        >\n          <span *ngIf=\"signupForm.controls.contactNumber.errors.required\"\n            >This field is mandatory</span\n          >\n          <span *ngIf=\"signupForm.controls.contactNumber.errors.pattern\"\n            >This field is invalid</span\n          >\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Password</mat-label>\n        <input type=\"password\" matInput formControlName=\"password\" required />\n        <mat-error\n          *ngIf=\"\n            signupForm.controls.password.touched && signupForm.controls.password\n          \"\n        >\n          <span *ngIf=\"signupForm.controls.password.errors\"\n            >This field is mandatory</span\n          >\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    type=\"submit\"\n    (click)=\"handleSubmit()\"\n    [disabled]=\"!(signupForm.valid && signupForm.dirty)\"\n  >\n    Signup\n  </button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { FullComponent } from './layouts/full/full.component';\nimport { RouteGuardService } from './services/route-guard.service';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  {\n    path: 'cafe',\n    component: FullComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: '/cafe/dashboard',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        loadChildren: () =>\n          import('./material-component/material.module').then(\n            (m) => m.MaterialComponentsModule\n          ),\n        canActivate: [RouteGuardService],\n        data: {\n          expectedRole: ['admin', 'user'],\n        },\n      },\n      {\n        path: 'dashboard',\n        loadChildren: () =>\n          import('./dashboard/dashboard.module').then((m) => m.DashboardModule),\n        canActivate: [RouteGuardService],\n        data: {\n          expectedRole: ['admin', 'user'],\n        },\n      },\n    ],\n  },\n  { path: '**', component: HomeComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { UserService } from '../services/user.service';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: any = FormGroup;\n  responseMessage: any;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private userService: UserService,\n    private snackBar: SnackbarService,\n    private dialogRef: MatDialogRef<LoginComponent>,\n    private ngxService: NgxUiLoaderService\n  ) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: [\n        null,\n        [Validators.required, Validators.pattern(GlobalConstants.emailRegex)],\n      ],\n      password: [null, [Validators.required]],\n    });\n  }\n\n  handleSubmit() {\n    this.ngxService.start();\n    let formData = this.loginForm.value;\n    var data = {\n      email: formData.email,\n      password: formData.password,\n    };\n\n    this.userService.login(data).subscribe(\n      (resp: any) => {\n        this.ngxService.stop();\n        this.dialogRef.close();\n        this.responseMessage = resp?.message;\n        localStorage.setItem('token', resp?.token)\n        this.snackBar.openSnackBar(this.responseMessage, '');\n        this.router.navigate(['/cafe/dashboard']);\n      },\n      (error) => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      }\n    );\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxLayout=\"row\">\n    <span class=\"title-center\">Login</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"loginForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Email</mat-label>\n        <input type=\"email\" matInput formControlName=\"email\" required />\n        <mat-error\n          *ngIf=\"\n            loginForm.controls.email.touched && loginForm.controls.email.invalid\n          \"\n        >\n          <span *ngIf=\"loginForm.controls.email.errors.required\"\n            >This field is mandatory</span\n          >\n          <span *ngIf=\"loginForm.controls.email.errors.pattern\"\n            >This field is invalid</span\n          >\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Password</mat-label>\n        <input type=\"password\" matInput formControlName=\"password\" required />\n        <mat-error\n          *ngIf=\"\n            loginForm.controls.password.touched && loginForm.controls.password.invalid\n          \"\n        >\n          <span *ngIf=\"loginForm.controls.password.errors.required\"\n            >This field is mandatory</span>\n          <span *ngIf=\"loginForm.controls.password.errors.pattern\"\n            >This field is Invalid</span>\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button\n    mat-raised-button\n    color=\"primary\"\n    type=\"submit\"\n    (click)=\"handleSubmit()\"\n    [disabled]=\"!(loginForm.valid && loginForm.dirty)\"\n  >\n    Login\n  </button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { Component } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ChangePasswordComponent } from 'src/app/material-component/dialog/change-password/change-password.component';\nimport { ConfirmationComponent } from 'src/app/material-component/dialog/confirmation/confirmation.component';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: [],\n})\nexport class AppHeaderComponent {\n  role: any;\n  constructor(private router: Router, private dialog: MatDialog) {}\n\n  logout() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.data = {\n      message: 'Logout',\n    };\n    const dialogRef = this.dialog.open(ConfirmationComponent, dialogConfig);\n    const sub = dialogRef.componentInstance.onEmitStatusChange.subscribe(\n      (user: any) => {\n        dialogRef.close();\n        localStorage.clear();\n        this.router.navigate(['/']);\n      }\n    );\n  }\n\n  changePassword() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '550px';\n    const dialogRef = this.dialog.open(ChangePasswordComponent, dialogConfig);\n  }\n}\n","<button [matMenuTriggerFor]=\"profile\" mat-icon-button class=\"m-r-5\">\n    <mat-icon>account_circle</mat-icon>\n</button>\n<mat-menu #profile=\"matMenu\">\n<button mat-menu-item (click)=\"changePassword()\">\n    <mat-icon>password</mat-icon>Change Password\n</button>\n<button mat-menu-item (click)=\"logout()\">\n    <mat-icon>exit_to_app</mat-icon>Logout\n</button>\n</mat-menu>","import { Directive, HostListener, Inject } from '@angular/core';\n\nimport { AccordionLinkDirective } from './accordionlink.directive';\n\n@Directive({\n  selector: '[appAccordionToggle]'\n})\nexport class AccordionAnchorDirective {\n  protected navlink: AccordionLinkDirective;\n\n  constructor(@Inject(AccordionLinkDirective) navlink: AccordionLinkDirective) {\n    this.navlink = navlink;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(e: any) {\n    this.navlink.toggle();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","// For sending the token to the server to verify\n\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class TokenInterceptorInterceptor implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const token = localStorage.getItem('token');\n    if (token) {\n      request = request.clone({\n        setHeaders: { Authorization: `Bearer ${token}` },\n      });\n    }\n    return next.handle(request).pipe(\n      catchError((err) => {\n        if (err instanceof HttpErrorResponse) {\n          console.log(err.url);\n          if (err.status == 401 || err.status === 403) {\n            if (this.router.url === '/') {\n            } else {\n              localStorage.clear();\n              this.router.navigate(['/']);\n            }\n          }\n        }\n        return throwError(err);\n      })\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}